{"mappings":"AAAA,wMAAwE;AACwD,iEAArG;AACW,MAAhC,CAAC,MAAM,GAAG,SAAS,eAAe,EAAC;IACrC,yJAAmE;IACmB,IAAlF,QAAQ;IACZ,IAAG,OAAO,eAAe,KAAK,QAAQ,EAClC,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,eAAe,CAAC;SACnD,IAAG,eAAe,YAAY,KAAK,EACrC,+CAAqB;IACK,QAAlB,GAAG,eAAe;IAE9B,0GAA0D;IACV,kBAAxC;IACE,gBAAM;IAChB,mDAAmD;IACnD,IAAI;IACJ,cAAc;IACd,OAAO;QACH,MAAM,EAAC,eAAe,CAAC,MAAM;QAC7B,uHAAyD;QACK,QAAtD,EAAC,SAAS,EAAC;YACf,IAAI,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAC,CAAC,EAAE,CAC7B,mCAAyB;YACf,QAAF,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;YAExC,qCAA6B;YACrB,OAAD,IAAI,CAAC,0DAA4B;aAA7B;SACgB;QAC/B,IAAI,EAAC,QAAQ,EAAC;YACV,IAAI,KAAK,GAAG,EAAE;YACd,IAAI,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAC,CAAC,EAAE,CAC7B,oGAAsC;YACwB,KAAzD,GAAE,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;YAG3E,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,eAAW;YAAZ;YACf,MAAE,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC;YAC5B,8GAAoD;YACM,OAAnD,MAAM,CAAA;QACb,qCAA2B;SACpB;QACX,GAAG,IAAE;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,2DAAuC;aAAxC;SACD;QACrB,IAAI,EAAC,EAAE,EAAC;YACJ,IAAI,IAAI,CAAC,GAAG,CAAC,EAAC,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAC,CAAC,EAAE,CAC/B,EAAE,CAAC,IAAI,CAAC,IAAI,EAAC,QAAQ,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;YAE/B,OAAO,IAAI,CAAA;SACd;QACD,MAAM,IAAE;YACJ,MAAM,KAAK,GAAG,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,GAAI;gBACf,IAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,KAAI,EAAE,EACnC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;aAElC,CAAC;YACF,OAAO,MAAM,CAAC,KAAK,CAAC,CAAA;SACvB;QACD,QAAQ,IAAE;YACN,MAAM,KAAK,GAAG,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG;gBACd,IAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,KAAI,EAAE,EACnC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC;aAEnC,CAAC;YACF,OAAO,MAAM,CAAC,KAAK,CAAC,CAAA;SACvB;QACD,KAAK,IAAE;YACH,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;SACxB;KACJ,CAAA;AACD,kGAAoD;CACvD","sources":["src/jquery.js"],"sourcesContent":["//核心思想：jQuery提供一个函数，这个函数接收一个选择器，根据这个选择器得到一些元素，然后返回一个对象，这个对象有一个方法可以操作这个元素\n//jQuery不能只接收一个选择器，还得接收一个数组\nwindow.jQuery = function(selectorOrArray){\n    //声明一个elements，让他的值为空，然后根据选择器是string还是Array，分别赋予不同的值，然后再返回一个api去操作它\n    let elements\n    if(typeof selectorOrArray === 'string'){\n        elements = document.querySelectorAll(selectorOrArray)\n    }else if(selectorOrArray instanceof Array){\n        //如果接收的是一个数组，就让xin'de\n        elements = selectorOrArray\n    }\n    //api 可以操作elements api是一个对象，这个对象的key是addClass，他的value是一个函数\n    //也可以写成 \n    // const api = {\n    //     \"addClass\":function(){console.log(elements)}\n    // }\n    //const api = \n    return {\n        oldApi:selectorOrArray.oldApi,\n        //这是一个闭包：函数访问了外部的变量（addClass访问了elements，这个elements是外部的变量）\n        addClass(className){\n            for(let i=0;i<elements.length;i++){\n                //给第i个elements添加className\n                elements[i].classList.add(className)\n            }\n            //return api  把addClass返回给api\n            return this //这个函数里的this就是对象，所以this就是api\n        },\n        find(selector){\n            let array = []\n            for(let i=0;i<elements.length;i++){\n                //用之前的空数组连接上新的元素，然后把新的元素得到的新数组再放回array\n                array =array.concat(Array.from(elements[i].querySelectorAll(selector)))\n                \n            }\n            array.oldApi = this //this就是api\n            const newApi = jQuery(array)\n            //因为不能return之前的api，我们需要一个新的api，这个新的api需要通过jQuery构造出来\n            return newApi\n            //可以简写成return jQuery(array)\n        },\n        end(){\n            return this.oldApi //this是当前的api（api2） 所以this.oldApi就是api1\n        },\n        each(fn){\n            for(let i = 0;i<elements.length;i++){\n                fn.call(null,elements[i],i)\n            }\n            return this\n        },\n        parent(){\n            const array = []\n            this.each((node) =>{\n                if(array.indexOf(node.parentNode)=== -1){\n                    array.push(node.parentNode)\n                }\n            })\n            return jQuery(array)\n        },\n        children(){\n            const array = []\n            this.each((node)=>{\n                if(array.indexOf(node.parentNode)=== -1){\n                    array.push(...node.children)\n                }\n            })\n            return jQuery(array)\n        },\n        print(){\n            console.log(elements)\n        }\n    }\n    // return api 声明了一个对象叫api，return这个对象，那可以直接return这个对象\n}"],"names":[],"version":3,"file":"index.3e2f9b55.js.map","sourceRoot":"/__parcel_source_root/"}